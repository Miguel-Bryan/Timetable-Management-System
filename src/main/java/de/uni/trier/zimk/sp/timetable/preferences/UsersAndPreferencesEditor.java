/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.uni.trier.zimk.sp.timetable.preferences;

import de.uni.trier.zimk.sp.timetable.ShiftPreferencesCellRenderer;
import de.uni.trier.zimk.sp.timetable.oo.LocationShift;
import de.uni.trier.zimk.sp.timetable.preferences.UsersAndPreferencesModel;
import de.uni.trier.zimk.sp.timetable.preferences.EditableDayShiftTimetableTableModel;
import de.uni.trier.zimk.sp.timetable.oo.Shift;
import de.uni.trier.zimk.sp.timetable.oo.Worker;
import de.uni.trier.zimk.sp.timetable.oo.WorkerComparable;
import de.uni.trier.zimk.sp.timetable.util.Timetable;
import java.awt.Point;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;

/**
 *
 * @author bryan
 */
public class UsersAndPreferencesEditor extends javax.swing.JPanel {
    private static org.apache.log4j.Logger logger = org.apache.log4j.Logger.getLogger(Timetable.class);
    /**
     * Creates new form UsersAndPreferencesEditor
     * /
    public UsersAndPreferencesEditor() {
        initComponents();
    }
    */
    

    public UsersAndPreferencesEditor(UsersAndPreferencesModel model, EditableDayShiftTimetableTableModel dayShiftTimetableTableModel) {
        this.model = model;
        this.dayShiftTimetableTableModel = dayShiftTimetableTableModel;
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        workerList = new javax.swing.JList();
        jPanel3 = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        displayAllButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        workerTable = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setDividerLocation(250);

        jPanel1.setLayout(new java.awt.BorderLayout());

        workerList.setModel(new javax.swing.AbstractListModel() {
            List<Worker> workers = model.getWorkers();
            public int getSize() { return workers.size(); }
            public Object getElementAt(int i) { return workers.get(i); }
        });
        jScrollPane2.setViewportView(workerList);

        jPanel1.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        addButton.setText("Add worker");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        jPanel3.add(addButton);

        removeButton.setText("Remove worker");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });
        jPanel3.add(removeButton);

        jPanel1.add(jPanel3, java.awt.BorderLayout.SOUTH);

        displayAllButton.setText("Display All.");
        jPanel4.add(displayAllButton);

        jPanel1.add(jPanel4, java.awt.BorderLayout.PAGE_START);

        jSplitPane1.setLeftComponent(jPanel1);

        jPanel2.setLayout(new java.awt.BorderLayout());

        workerTable.setModel(dayShiftTimetableTableModel);
        workerTable.setRowHeight(100);
        workerTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                workerTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(workerTable);
        for(int i = 0; i<dayShiftTimetableTableModel.getColumnCount(); i++ ){
            workerTable.getColumnModel().getColumn(i).setCellRenderer(
                new ShiftPreferencesCellRenderer(model.getTimetable()) );
        }

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(jPanel2);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        addButton.setActionCommand("ADD BUTTON");
        addButton.addActionListener(new Add_RemoveWorkerActionListener());
        System.out.println("Add Button pressed.");
       
    }//GEN-LAST:event_addButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        // TODO add your handling code here:
        removeButton.setActionCommand("REMOVE BUTTON");
        removeButton.addActionListener(new Add_RemoveWorkerActionListener());
         System.out.println("Remove button pressed.");
    }//GEN-LAST:event_removeButtonActionPerformed

    private void workerTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_workerTableMouseClicked
        if( evt.isControlDown() ){
            
            Point p = evt.getPoint();
            int row = workerTable.rowAtPoint(p); 
            int column = workerTable.columnAtPoint(p); 
            
            EditableDayShiftTimetableTableModel tableModel = (EditableDayShiftTimetableTableModel) ((JTable)evt.getComponent()).getModel();
            LocationShift shift = (LocationShift)tableModel.getValueAt(row, column);
            
            if( shift != null ){
                
                List<Worker> volunteers = new AddWorkerDialog(model.getTimetable(), shift).getSelectedWorkers();
                Collections.sort(volunteers, new WorkerComparable());
                
                model.getTimetable().getTimetableState().updateVolunteers( shift , volunteers);
                model.getTimetable().fireStateChanged();
                
                
            }
        }
    }//GEN-LAST:event_workerTableMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton displayAllButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JButton removeButton;
    private javax.swing.JList workerList;
    private javax.swing.JTable workerTable;
    // End of variables declaration//GEN-END:variables

    private EditableDayShiftTimetableTableModel dayShiftTimetableTableModel;
    private UsersAndPreferencesModel model;
    
    
    public void setTableModel(EditableDayShiftTimetableTableModel tableModel) {
        this.dayShiftTimetableTableModel = tableModel;
        workerTable.setModel(tableModel);
    }
}
