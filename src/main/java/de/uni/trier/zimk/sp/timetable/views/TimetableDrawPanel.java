/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.uni.trier.zimk.sp.timetable.views;

import de.uni.trier.zimk.sp.timetable.oo.*;
import java.awt.*;
import java.awt.geom.Line2D;
import java.util.Collections;
import java.util.List;

/**
 *
 * @author Landry Ngani
 */
public class TimetableDrawPanel extends javax.swing.JPanel {

    private OrganisationalConfiguration configuration;
    private Location location;
    private TimetableState timetableState;
    
    /**
     * Creates new form TimetableDrawPanel
     */
    public TimetableDrawPanel(OrganisationalConfiguration configuration, Location location, TimetableState timetableState) {
        this.configuration = configuration;
        this.location = location;
        this.timetableState = timetableState;
        
        initComponents();
    }


    @Override
    public void paint(Graphics g) {
        int width = this.getWidth();
        int height = this.getHeight();
        
        g.setColor(Color.BLACK);
        g.drawRect(5, 5, width-10, height-10);
        
        List<Workday> workdays = configuration.getWorkdays();
        int maxRows = location.getMaxShiftsLength(configuration);
                
        int colWidth = width / workdays.size();
        int rowHeight = height / maxRows;
        
        Graphics2D g2 = (Graphics2D)g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2.setStroke( new BasicStroke(2.0f) );
        
        /*
        //ROWS
        for(int i = 0; i < maxRows; i++){
            g.setColor(Color.BLACK);
            g.drawLine(5, i*rowHeight, width-10, i*rowHeight);
            
            g2.draw(new Line2D.Double(5, i*rowHeight, width-10, i*rowHeight));
        }
        */
        
        for(int columnIndex = 0; columnIndex < workdays.size(); columnIndex++){
            for(int rowIndex = 0; rowIndex < maxRows; rowIndex++){
                
                 Workday workday = workdays.get(columnIndex);
                 LocationShift shift = location.getShift(workday, rowIndex);
                
                 if( shift != null ){
                    List<Worker> allWorkers = shift.getAllWorkers();
                    Collections.sort(allWorkers, new WorkerComparable());

                    if( ! allWorkers.isEmpty() ){
                        int workerShiftWidth = colWidth / allWorkers.size();
                        int workerColCenter = workerShiftWidth/2;
                        int workerRowCenter = rowHeight/2;

                        int workerCounter = 0;
                        for (Worker worker : allWorkers) {

                            g2.setColor( worker.getColor().getColor());
                            g2.fillRect( (columnIndex*colWidth)+(workerCounter*workerShiftWidth), (rowIndex*rowHeight), 
                                    workerShiftWidth, rowHeight);
                            
                            g2.setColor( Color.BLACK );
                            g2.drawString( worker.getName() , ((columnIndex*colWidth)+(workerCounter*workerShiftWidth))+workerColCenter-20, (rowIndex*rowHeight)+workerRowCenter );

                            workerCounter++;
                        }
                    }
                 }
           }
        }
        
        // COLS
        for(int i = 0; i < workdays.size(); i++){
            g.setColor(Color.BLACK);
            g.drawLine(i*colWidth, 5, i*colWidth, height-10);
            
            g2.draw(new Line2D.Double(i*colWidth, 5, i*colWidth, height-10));
        }
        
        //System.out.println("#############> PAINT CALLED.");
  
    }

    @Override
    public void repaint() {
        super.repaint();
        //System.out.println("#############> REPAINT CALLED.");
    }
    
    

    public TimetableState getTimetableState() {
        return timetableState;
    }

    public void setTimetableState(TimetableState timetableState) {
        stateToDisplay(timetableState);
    }
    
    /**
     * 
     * @param state 
     */
    public void stateToDisplay(TimetableState state){
        this.timetableState = state;
        
        for(Location loc : state.getLocations()){
            if(loc.equals(location)){
                this.location = loc;
                break;
            }
        }
        
        this.repaint();
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
