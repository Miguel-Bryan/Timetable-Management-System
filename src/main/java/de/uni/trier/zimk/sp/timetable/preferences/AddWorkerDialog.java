/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.uni.trier.zimk.sp.timetable.preferences;

import de.uni.trier.zimk.sp.timetable.oo.LocationShift;
import de.uni.trier.zimk.sp.timetable.oo.Shift;
import de.uni.trier.zimk.sp.timetable.oo.Worker;
import de.uni.trier.zimk.sp.timetable.oo.WorkerComparable;
import de.uni.trier.zimk.sp.timetable.util.Timetable;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.JCheckBox;
import javax.swing.JFrame;

/**
 *
 * @author me
 */
public class AddWorkerDialog extends javax.swing.JDialog {

    
    private Timetable timetable;
    private LocationShift shift;
    private List<JCheckBox> workersBoxes;

    /**
     * Creates new form WorkerDialog
     */
    public AddWorkerDialog(Timetable timetable, LocationShift shift) {
        this.timetable = timetable;
        this.shift = shift;
        
        initComponents();
        initContent();
        
        
        this.setSize(600, 450);
        this.setLocationRelativeTo(null);
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        workersPanel = new javax.swing.JPanel();
        actionsPanel = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        applyButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Shifts - Workers");
        setLocationByPlatform(true);
        setModal(true);
        setResizable(false);

        workersPanel.setMinimumSize(new java.awt.Dimension(600, 450));
        workersPanel.setLayout(new java.awt.GridLayout(5, 1));
        getContentPane().add(workersPanel, java.awt.BorderLayout.CENTER);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        actionsPanel.add(cancelButton);

        applyButton.setText("Apply");
        applyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyButtonActionPerformed(evt);
            }
        });
        actionsPanel.add(applyButton);

        getContentPane().add(actionsPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void applyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyButtonActionPerformed
        List<Worker> workers = getSelectedWorkers();
        this.setVisible(false);
    }//GEN-LAST:event_applyButtonActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel actionsPanel;
    private javax.swing.JButton applyButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel workersPanel;
    // End of variables declaration//GEN-END:variables

    
    
    
    public List<Worker> getSelectedWorkers() {
        List<Worker> workers = new ArrayList<Worker>();
        for(JCheckBox box : workersBoxes){
            if(box.isSelected() ){
                Worker worker = timetable.getTimetableState().getWorkerByName( box.getText() );
                workers.add(worker);
            }
        }
        return workers;
    }

    private void initContent() {
        workersBoxes = new ArrayList<JCheckBox>();
        List<Worker> workers = timetable.getTimetableState().getWorkers();
        Collections.sort(workers, new WorkerComparable());
        
        for(Worker worker : workers ){
            JCheckBox box = new JCheckBox( worker.getName(), worker.isWillingForShift(shift) );
            workersBoxes.add(box);
            workersPanel.add(box);
        }
    }
    
}
